# Open with browser (IE or Edge):
# https://boxstarter.org/package/nr/url?https://raw.githubusercontent.com/golonac/setup/main/setup.ps

# Windows settings
Disable-UAC
try {
  Set-ExecutionPolicy RemoteSigned -Scope LocalMachine
}
catch {}
Set-PSRepository -Name PSGallery -InstallationPolicy Trusted
# Use DevDrive on D:
fsutil devdrv trust D:
[Environment]::SetEnvironmentVariable('npm_config_cache', 'D:\packages\npm', 'Machine')
[Environment]::SetEnvironmentVariable('NUGET_PACKAGES', 'D:\packages\nuget', 'Machine')
[Environment]::SetEnvironmentVariable('NUGET_HTTP_CACHE_PATH', 'D:\packages\nuget-http-cache', 'Machine')
[Environment]::SetEnvironmentVariable('NUGET_PLUGINS_CACHE_PATH', 'D:\packages\nuget-plugins-cache', 'Machine')
[Environment]::SetEnvironmentVariable('NUGET_SCRATCH', 'D:\packages\nuget-scratch', 'Machine')
[Environment]::SetEnvironmentVariable('VCPKG_DEFAULT_BINARY_CACHE', 'D:\packages\vcpkg', 'Machine')
[Environment]::SetEnvironmentVariable('PIP_CACHE_DIR', 'D:\packages\pip', 'Machine')
[Environment]::SetEnvironmentVariable('CARGO_HOME', 'D:\packages\cargo', 'Machine')
[Environment]::SetEnvironmentVariable('MAVEN_OPTS', '-Dmaven.repo.local=D:\packages\maven %MAVEN_OPTS%', 'Machine')
[Environment]::SetEnvironmentVariable('GRADLE_USER_HOME', 'D:\packages\gradle', 'Machine')
# Localization
Set-WinSystemLocale fi-FI
Set-WinUserLanguageList fi
Set-TimeZone "FLE Standard Time"
Set-Culture fi-FI
Set-BoxstarterTaskbarOptions -DisableSearchBox
Set-WindowsExplorerOptions -EnableShowHiddenFilesFoldersDrives -EnableShowProtectedOSFiles -EnableShowFileExtensions -EnableShowFullPathInTitleBar -EnableOpenFileExplorerToQuickAccess -EnableShowRecentFilesInQuickAccess -EnableShowFrequentFoldersInQuickAccess -EnableExpandToOpenFolder -EnableShowRibbon -EnableItemCheckBox
Disable-InternetExplorerESC
Disable-GameBarTips
Disable-BingSearch
# Install registry settings
reg import (Join-Path $env:ONEDRIVECONSUMER "Setup/WindowsSettings.reg")
# Disable Telemetry
Disable-ScheduledTask -TaskName "Microsoft\Windows\Application Experience\Microsoft Compatibility Appraiser" | Out-Null
Disable-ScheduledTask -TaskName "Microsoft\Windows\Application Experience\ProgramDataUpdater" | Out-Null
Disable-ScheduledTask -TaskName "Microsoft\Windows\Autochk\Proxy" | Out-Null
Disable-ScheduledTask -TaskName "Microsoft\Windows\Customer Experience Improvement Program\Consolidator" | Out-Null
Disable-ScheduledTask -TaskName "Microsoft\Windows\Customer Experience Improvement Program\UsbCeip" | Out-Null
Disable-ScheduledTask -TaskName "Microsoft\Windows\DiskDiagnostic\Microsoft-Windows-DiskDiagnosticDataCollector" | Out-Null
Disable-ScheduledTask -TaskName "Microsoft\Windows\Feedback\Siuf\DmClient" -ErrorAction SilentlyContinue | Out-Null
Disable-ScheduledTask -TaskName "Microsoft\Windows\Feedback\Siuf\DmClientOnScenarioDownload" -ErrorAction SilentlyContinue | Out-Null
# Set the current network as Private
Get-NetConnectionProfile | Set-NetConnectionProfile -NetworkCategory Private
# Remove Fax
Remove-Printer -Name "Fax" -ErrorAction:SilentlyContinue
# Azure PowerShell modules
Install-Module -Name AzureRM -Scope AllUsers
Install-Module -Name Azure -Scope AllUsers -AllowClobber
Install-Module -Name Terminal-Icons
# ChatGPT PowerShell module
Install-Module PowerShellAIAssistant -AllowClobber

function Add-To-Path($Path) {
    $Path = [Environment]::GetEnvironmentVariable("PATH", "Machine") + [IO.Path]::PathSeparator + $Path
    [Environment]::SetEnvironmentVariable( "Path", $Path, "Machine" )
}

# Core
choco install powershell-core
choco install nodejs
choco install git
choco install gsudo
choco install python
choco install nuget.commandline
choco install poshgit
choco install oh-my-posh
choco install grep
choco install winfetch
choco install powertoys
choco install bat
choco install zoxide
choco install jiracli
refreshenv
oh-my-posh font install RobotoMono
# Patch an oh-my-posh theme with a PowerShell compatibility setting
$theme = Get-Content "$env:POSH_THEMES_PATH\cobalt2.omp.json" | ConvertFrom-Json
$theme | Add-Member -Name patch_pswh_bleed -Value true -MemberType NoteProperty
Set-Content -Path ("$env:POSH_THEMES_PATH\theme.json") -Value ($theme | ConvertTo-Json -Depth 99)
# Create a PowerShell (7) and WindowsPowerShell (legacy) profile which enables oh-my-posh on launch
foreach ($item in "PowerShell", "WindowsPowerShell") {
  $path = Join-Path ([Environment]::GetFolderPath("MyDocuments")) $item
  If (!(Test-Path $path)) {
    New-Item -Path $path -Type Directory -Force
  }
  $profilePath = Join-Path $path "Microsoft.PowerShell_profile.ps1"
  Copy-Item "$env:OneDriveConsumer\Setup\Terminal\Microsoft.PowerShell_profile.ps1" $profilePath
}

# IDE
choco install vscode
choco install visualstudio2022community
choco install sql-server-management-studio
refreshenv
code

# Browsers
choco install googlechrome
choco install firefox
choco install chromedriver

# Tools
choco install 7zip
choco install winmerge
Add-To-Path $env:ProgramFiles/Winmerge
choco install postman
choco install slack
choco install discord
choco install spotify
choco install tidal
choco install terraform
choco install forticlientvpn
choco install azure-cosmosdb-emulator
choco install keepass
choco install joplin
choco install wiztree
choco install docker-desktop
choco install docker-compose
choco install czkawka --ignore-checksums
# Probably not necessary:
#choco install vcredist140
#choco install vcredist2015
#choco install visualstudio2017buildtools
#choco install visualstudio2019-workload-vctools
#choco install visualstudio2019buildtools
#choco install minikube

# NPM & tools
refreshenv
npm install -g typescript
npm install -g @angular/cli
npm config set fund false
dotnet tool install --global Microsoft.Playwright.CLI

# Config files from OneDrive
$vscodePath = Join-Path "$env:APPDATA" "Code/User"
$vscodeRoamingPath = Join-Path "$env:OneDriveConsumer" "Setup/VSCode"
$roamingItems = @{
  (Join-Path (Get-Item $PROFILE).DirectoryName "FileSystem.ps1xml") = (Join-Path "$env:OneDriveConsumer" "Setup/Terminal/FileSystem.ps1xml")
  (Join-Path $vscodePath "settings.json") = (Join-Path $vscodeRoamingPath "settings.json")
  (Join-Path $vscodePath "keyBindings.json") = (Join-Path $vscodeRoamingPath "keyBindings.json")
  (Join-Path $vscodePath "snippets/") = (Join-Path $vscodeRoamingPath "snippets/")
  (Join-Path $env:LOCALAPPDATA "Packages/Microsoft.WindowsTerminal_8wekyb3d8bbwe/LocalState/settings.json") = (Join-Path "$env:OneDriveConsumer" "Setup/Terminal/settings.json")
}
foreach ($localItemPath in $roamingItems.Keys) {
  if (Test-Path $localItemPath) {
    $existingItem = Get-Item $localItemPath
    if ($existingItem.LinkType -eq "SymbolicLink") {
      Write-Host "Local item '$localItemPath' already redirected to '$($existingItem.Target)'"
    }
    else {
      $roamingItemPath = $roamingItems[$localItemPath]
      New-Item -ItemType SymbolicLink -Path $localItemPath -Target $roamingItemPath -Force
    }
  }
  else {
    $roamingItemPath = $roamingItems[$localItemPath]
    New-Item -ItemType SymbolicLink -Path $localItemPath -Target $roamingItemPath
  }
}
# Install VS Code extensions
Get-Content vscode-extensions.list | ForEach-Object { code --install-extension $_ }
#Add-PoshGitToProfile -AllHosts

# NAS, GIT config
[console]::beep(600,1000)
$nasuser = Read-Host -Prompt "NAS username"
$naspwd = Read-Host -Prompt "NAS password"
net use Y: \\192.168.1.113\Media $naspwd /USER:$nasuser
net use Z: \\192.168.1.113\Photos $naspwd /USER:$nasuser
$gitusername = Read-Host -Prompt "GIT user full name"
$gituseremail = Read-Host -Prompt "GIT user email"
git config --global user.name "$gitusername"
git config --global user.email "$gituseremail"

Enable-UAC
